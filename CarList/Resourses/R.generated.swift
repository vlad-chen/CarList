//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 31 files.
  struct file {
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    /// Resource file `SF-Pro-Display-Black.otf`.
    static let sfProDisplayBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Black", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-BlackItalic.otf`.
    static let sfProDisplayBlackItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-BlackItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Bold.otf`.
    static let sfProDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-BoldItalic.otf`.
    static let sfProDisplayBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-BoldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Heavy.otf`.
    static let sfProDisplayHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Heavy", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-HeavyItalic.otf`.
    static let sfProDisplayHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-HeavyItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Light.otf`.
    static let sfProDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-LightItalic.otf`.
    static let sfProDisplayLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-LightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Medium.otf`.
    static let sfProDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-MediumItalic.otf`.
    static let sfProDisplayMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-MediumItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Regular.otf`.
    static let sfProDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-RegularItalic.otf`.
    static let sfProDisplayRegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-RegularItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Semibold.otf`.
    static let sfProDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-SemiboldItalic.otf`.
    static let sfProDisplaySemiboldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-SemiboldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Thin.otf`.
    static let sfProDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Thin", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-ThinItalic.otf`.
    static let sfProDisplayThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-ThinItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Ultralight.otf`.
    static let sfProDisplayUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-UltralightItalic.otf`.
    static let sfProDisplayUltralightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-UltralightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Bold.otf`.
    static let sfProTextBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-BoldItalic.otf`.
    static let sfProTextBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-BoldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Heavy.otf`.
    static let sfProTextHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Heavy", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-HeavyItalic.otf`.
    static let sfProTextHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-HeavyItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Light.otf`.
    static let sfProTextLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-LightItalic.otf`.
    static let sfProTextLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-LightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Medium.otf`.
    static let sfProTextMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-MediumItalic.otf`.
    static let sfProTextMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-MediumItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Regular.otf`.
    static let sfProTextRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-RegularItalic.otf`.
    static let sfProTextRegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-RegularItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Semibold.otf`.
    static let sfProTextSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-SemiboldItalic.otf`.
    static let sfProTextSemiboldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-SemiboldItalic", pathExtension: "otf")
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Black", withExtension: "otf")`
    static func sfProDisplayBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-BlackItalic", withExtension: "otf")`
    static func sfProDisplayBlackItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBlackItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Bold", withExtension: "otf")`
    static func sfProDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-BoldItalic", withExtension: "otf")`
    static func sfProDisplayBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Heavy", withExtension: "otf")`
    static func sfProDisplayHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-HeavyItalic", withExtension: "otf")`
    static func sfProDisplayHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Light", withExtension: "otf")`
    static func sfProDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-LightItalic", withExtension: "otf")`
    static func sfProDisplayLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Medium", withExtension: "otf")`
    static func sfProDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-MediumItalic", withExtension: "otf")`
    static func sfProDisplayMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Regular", withExtension: "otf")`
    static func sfProDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-RegularItalic", withExtension: "otf")`
    static func sfProDisplayRegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Semibold", withExtension: "otf")`
    static func sfProDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-SemiboldItalic", withExtension: "otf")`
    static func sfProDisplaySemiboldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Thin", withExtension: "otf")`
    static func sfProDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-ThinItalic", withExtension: "otf")`
    static func sfProDisplayThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-Ultralight", withExtension: "otf")`
    static func sfProDisplayUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Display-UltralightItalic", withExtension: "otf")`
    static func sfProDisplayUltralightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayUltralightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-Bold", withExtension: "otf")`
    static func sfProTextBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-BoldItalic", withExtension: "otf")`
    static func sfProTextBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-Heavy", withExtension: "otf")`
    static func sfProTextHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-HeavyItalic", withExtension: "otf")`
    static func sfProTextHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-Light", withExtension: "otf")`
    static func sfProTextLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-LightItalic", withExtension: "otf")`
    static func sfProTextLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-Medium", withExtension: "otf")`
    static func sfProTextMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-MediumItalic", withExtension: "otf")`
    static func sfProTextMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-Regular", withExtension: "otf")`
    static func sfProTextRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-RegularItalic", withExtension: "otf")`
    static func sfProTextRegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextRegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-Semibold", withExtension: "otf")`
    static func sfProTextSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SF-Pro-Text-SemiboldItalic", withExtension: "otf")`
    static func sfProTextSemiboldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextSemiboldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 30 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-BlackItalic`.
    static let sfProDisplayBlackItalic = Rswift.FontResource(fontName: "SFProDisplay-BlackItalic")
    /// Font `SFProDisplay-Black`.
    static let sfProDisplayBlack = Rswift.FontResource(fontName: "SFProDisplay-Black")
    /// Font `SFProDisplay-BoldItalic`.
    static let sfProDisplayBoldItalic = Rswift.FontResource(fontName: "SFProDisplay-BoldItalic")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-HeavyItalic`.
    static let sfProDisplayHeavyItalic = Rswift.FontResource(fontName: "SFProDisplay-HeavyItalic")
    /// Font `SFProDisplay-Heavy`.
    static let sfProDisplayHeavy = Rswift.FontResource(fontName: "SFProDisplay-Heavy")
    /// Font `SFProDisplay-Italic`.
    static let sfProDisplayItalic = Rswift.FontResource(fontName: "SFProDisplay-Italic")
    /// Font `SFProDisplay-LightItalic`.
    static let sfProDisplayLightItalic = Rswift.FontResource(fontName: "SFProDisplay-LightItalic")
    /// Font `SFProDisplay-Light`.
    static let sfProDisplayLight = Rswift.FontResource(fontName: "SFProDisplay-Light")
    /// Font `SFProDisplay-MediumItalic`.
    static let sfProDisplayMediumItalic = Rswift.FontResource(fontName: "SFProDisplay-MediumItalic")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProDisplay-SemiboldItalic`.
    static let sfProDisplaySemiboldItalic = Rswift.FontResource(fontName: "SFProDisplay-SemiboldItalic")
    /// Font `SFProDisplay-Semibold`.
    static let sfProDisplaySemibold = Rswift.FontResource(fontName: "SFProDisplay-Semibold")
    /// Font `SFProDisplay-ThinItalic`.
    static let sfProDisplayThinItalic = Rswift.FontResource(fontName: "SFProDisplay-ThinItalic")
    /// Font `SFProDisplay-Thin`.
    static let sfProDisplayThin = Rswift.FontResource(fontName: "SFProDisplay-Thin")
    /// Font `SFProDisplay-UltralightItalic`.
    static let sfProDisplayUltralightItalic = Rswift.FontResource(fontName: "SFProDisplay-UltralightItalic")
    /// Font `SFProDisplay-Ultralight`.
    static let sfProDisplayUltralight = Rswift.FontResource(fontName: "SFProDisplay-Ultralight")
    /// Font `SFProText-BoldItalic`.
    static let sfProTextBoldItalic = Rswift.FontResource(fontName: "SFProText-BoldItalic")
    /// Font `SFProText-Bold`.
    static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
    /// Font `SFProText-HeavyItalic`.
    static let sfProTextHeavyItalic = Rswift.FontResource(fontName: "SFProText-HeavyItalic")
    /// Font `SFProText-Heavy`.
    static let sfProTextHeavy = Rswift.FontResource(fontName: "SFProText-Heavy")
    /// Font `SFProText-Italic`.
    static let sfProTextItalic = Rswift.FontResource(fontName: "SFProText-Italic")
    /// Font `SFProText-LightItalic`.
    static let sfProTextLightItalic = Rswift.FontResource(fontName: "SFProText-LightItalic")
    /// Font `SFProText-Light`.
    static let sfProTextLight = Rswift.FontResource(fontName: "SFProText-Light")
    /// Font `SFProText-MediumItalic`.
    static let sfProTextMediumItalic = Rswift.FontResource(fontName: "SFProText-MediumItalic")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-SemiboldItalic`.
    static let sfProTextSemiboldItalic = Rswift.FontResource(fontName: "SFProText-SemiboldItalic")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    
    /// `UIFont(name: "SFProDisplay-Black", size: ...)`
    static func sfProDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlack, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-BlackItalic", size: ...)`
    static func sfProDisplayBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlackItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-BoldItalic", size: ...)`
    static func sfProDisplayBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Heavy", size: ...)`
    static func sfProDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavy, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-HeavyItalic", size: ...)`
    static func sfProDisplayHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Italic", size: ...)`
    static func sfProDisplayItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Light", size: ...)`
    static func sfProDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLight, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-LightItalic", size: ...)`
    static func sfProDisplayLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLightItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-MediumItalic", size: ...)`
    static func sfProDisplayMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMediumItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Semibold", size: ...)`
    static func sfProDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemibold, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-SemiboldItalic", size: ...)`
    static func sfProDisplaySemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemiboldItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Thin", size: ...)`
    static func sfProDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThin, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-ThinItalic", size: ...)`
    static func sfProDisplayThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThinItalic, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Ultralight", size: ...)`
    static func sfProDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralight, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-UltralightItalic", size: ...)`
    static func sfProDisplayUltralightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralightItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Bold", size: ...)`
    static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBold, size: size)
    }
    
    /// `UIFont(name: "SFProText-BoldItalic", size: ...)`
    static func sfProTextBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Heavy", size: ...)`
    static func sfProTextHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavy, size: size)
    }
    
    /// `UIFont(name: "SFProText-HeavyItalic", size: ...)`
    static func sfProTextHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Italic", size: ...)`
    static func sfProTextItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Light", size: ...)`
    static func sfProTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLight, size: size)
    }
    
    /// `UIFont(name: "SFProText-LightItalic", size: ...)`
    static func sfProTextLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLightItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }
    
    /// `UIFont(name: "SFProText-MediumItalic", size: ...)`
    static func sfProTextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMediumItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }
    
    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }
    
    /// `UIFont(name: "SFProText-SemiboldItalic", size: ...)`
    static func sfProTextSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemiboldItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SF-Pro-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Heavy' could not be loaded, is 'SF-Pro-Text-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Thin' could not be loaded, is 'SF-Pro-Display-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-UltralightItalic' could not be loaded, is 'SF-Pro-Display-UltralightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Light' could not be loaded, is 'SF-Pro-Display-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Ultralight' could not be loaded, is 'SF-Pro-Display-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-LightItalic' could not be loaded, is 'SF-Pro-Text-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-MediumItalic' could not be loaded, is 'SF-Pro-Display-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-SemiboldItalic' could not be loaded, is 'SF-Pro-Text-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-SemiboldItalic' could not be loaded, is 'SF-Pro-Display-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Black' could not be loaded, is 'SF-Pro-Display-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'SF-Pro-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SF-Pro-Display-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Heavy' could not be loaded, is 'SF-Pro-Display-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-LightItalic' could not be loaded, is 'SF-Pro-Display-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Italic' could not be loaded, is 'SF-Pro-Display-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-HeavyItalic' could not be loaded, is 'SF-Pro-Display-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SF-Pro-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-BoldItalic' could not be loaded, is 'SF-Pro-Text-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-ThinItalic' could not be loaded, is 'SF-Pro-Display-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BlackItalic' could not be loaded, is 'SF-Pro-Display-BlackItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Light' could not be loaded, is 'SF-Pro-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BoldItalic' could not be loaded, is 'SF-Pro-Display-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-HeavyItalic' could not be loaded, is 'SF-Pro-Text-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Italic' could not be loaded, is 'SF-Pro-Text-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Semibold' could not be loaded, is 'SF-Pro-Display-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-MediumItalic' could not be loaded, is 'SF-Pro-Text-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CarListCell`.
    static let carListCell = _R.nib._CarListCell()
    
    /// `UINib(name: "CarListCell", in: bundle)`
    static func carListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.carListCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CarListCell`.
    static let carListCell: Rswift.ReuseIdentifier<CarListCell> = Rswift.ReuseIdentifier(identifier: "CarListCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `CarListViewController`, and contains static references to 3 segues.
    struct carListViewController {
      /// Segue identifier `embed weather`.
      static let embedWeather: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CarListViewController, WeatherInfoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "embed weather")
      /// Segue identifier `show add`.
      static let showAdd: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CarListViewController, CarAddViewController> = Rswift.StoryboardSegueIdentifier(identifier: "show add")
      /// Segue identifier `show details`.
      static let showDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CarListViewController, CarDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "show details")
      
      /// Optionally returns a typed version of segue `embed weather`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embedWeather(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CarListViewController, WeatherInfoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.carListViewController.embedWeather, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `show add`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAdd(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CarListViewController, CarAddViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.carListViewController.showAdd, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `show details`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CarListViewController, CarDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.carListViewController.showDetails, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `Car`.
    static let car = _R.storyboard.car()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "Car", bundle: ...)`
    static func car(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.car)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CarListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CarListCell
      
      let bundle = R.hostingBundle
      let identifier = "CarListCell"
      let name = "CarListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CarListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CarListCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try car.validate()
    }
    
    struct car: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let carAddViewController = StoryboardViewControllerResource<CarAddViewController>(identifier: "CarAddViewController")
      let carDetailsViewController = StoryboardViewControllerResource<CarDetailsViewController>(identifier: "CarDetailsViewController")
      let carListViewController = StoryboardViewControllerResource<CarListViewController>(identifier: "CarListViewController")
      let name = "Car"
      let weatherInfoViewController = StoryboardViewControllerResource<WeatherInfoViewController>(identifier: "WeatherInfoViewController")
      
      func carAddViewController(_: Void = ()) -> CarAddViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carAddViewController)
      }
      
      func carDetailsViewController(_: Void = ()) -> CarDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carDetailsViewController)
      }
      
      func carListViewController(_: Void = ()) -> CarListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carListViewController)
      }
      
      func weatherInfoViewController(_: Void = ()) -> WeatherInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weatherInfoViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.car().carDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carDetailsViewController' could not be loaded from storyboard 'Car' as 'CarDetailsViewController'.") }
        if _R.storyboard.car().carListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carListViewController' could not be loaded from storyboard 'Car' as 'CarListViewController'.") }
        if _R.storyboard.car().weatherInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weatherInfoViewController' could not be loaded from storyboard 'Car' as 'WeatherInfoViewController'.") }
        if _R.storyboard.car().carAddViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carAddViewController' could not be loaded from storyboard 'Car' as 'CarAddViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
